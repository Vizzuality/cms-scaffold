# The workflow uses GH Secrets managed by Terraform:
# - TF_GCP_PROJECT_ID
# - TF_GCP_REGION
# - TF_[STAGING|PRODUCTION]_GCP_SA_KEY - credentials json for authentication
# - TF_[STAGING|PRODUCTION]_CLIENT_REPOSITORY
# - TF_[STAGING|PRODUCTION]_CLIENT_SERVICE
# - TF_[STAGING|PRODUCTION]_CMS_REPOSITORY
# - TF_[STAGING|PRODUCTION]_CMS_SERVICE
# - TF_[STAGING|PRODUCTION]_ANALYSIS_CF_NAME
#
# The workflow also processes GH secrets and variables managed by Terraform or manually, which are used to build the .env files for the containers.
# These follow the naming convention:
# - TF_(STAGING|PRODUCTION)_[CLIENTENV|CMSENV]_* - managed by Terraform
# - (STAGING|PRODUCTION)_[CLIENTENV|CMSENV]_* - managed manually

name: Run deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

    paths:
      - 'client/**'
      - 'cms/**'
      - '.github/workflows/*'

env:
  PROJECT_ID: ${{ secrets.TF_GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.TF_GCP_REGION }}
  REGION: ${{ secrets.TF_GCP_REGION }}

jobs:
  deploy_client:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Extract environment name
        env:
          ENVIRONMENT: ${{ steps.extract_branch.outputs.branch == 'main' && 'PRODUCTION' || 'STAGING' }}
        run: echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        id: extract_environment

      #- name: Google Auth authentication via credentials json
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: "${{ secrets[format('TF_{0}_GCP_SA_KEY', steps.extract_environment.outputs.environment)] }}"
          token_format: 'access_token'

      # Authenticate Docker to Google Cloud Artifact Registry via credentials json
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets[format('TF_{0}_GCP_SA_KEY', steps.extract_environment.outputs.environment)] }}

      - name: Copy env variables to docker
        shell: bash
        run: |
          # Filter client secrets & vars and save .env file (names starting with (TF_)(PRODUCTION|STAGING_)CLIENTENV_
          echo '${{ secrets != null && toJSON(secrets) || null }}' '${{ vars != null && toJSON(vars) || null}}' | jq -r 'to_entries | map(.key + "=" + .value) | .[]' | grep -E "^(TF_)?(${{ steps.extract_environment.outputs.environment }}_)?CLIENTENV_" | sed -r 's/^(TF_)?(${{ steps.extract_environment.outputs.environment }}_)?CLIENTENV_//' > client/.env.local

      - name: Build and Push Container
        env:
          REPOSITORY: ${{ secrets[format('TF_{0}_CLIENT_REPOSITORY', steps.extract_environment.outputs.environment)] }} 
          SERVICE: ${{ secrets[format('TF_{0}_CLIENT_SERVICE', steps.extract_environment.outputs.environment)] }}
        run: |- 
          docker build -f client/Dockerfile.prod -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./client
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          # tag as "latest"
          docker tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"

      - name: Deploy to Cloud Run
        env:
          REPOSITORY: ${{ secrets[format('TF_{0}_CLIENT_REPOSITORY', steps.extract_environment.outputs.environment)] }} 
          SERVICE: ${{ secrets[format('TF_{0}_CLIENT_SERVICE', steps.extract_environment.outputs.environment)] }}
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

  deploy_cms:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Extract environment name
        env:
          ENVIRONMENT: ${{ steps.extract_branch.outputs.branch == 'main' && 'PRODUCTION' || 'STAGING' }}
        run: echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        id: extract_environment

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: "${{ secrets[format('TF_{0}_GCP_SA_KEY', steps.extract_environment.outputs.environment)] }}"
          token_format: 'access_token'

      # Authenticate Docker to Google Cloud Artifact Registry via credentials json
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets[format('TF_{0}_GCP_SA_KEY', steps.extract_environment.outputs.environment)] }}

      - name: Copy env variables to docker
        shell: bash
        run: |
          # Filter cms secrets & vars and save .env file (names starting with (TF_)(PRODUCTION|STAGING_)CMSENV_
          echo '${{ secrets != null && toJSON(secrets) || null }}' '${{ vars != null && toJSON(vars) || null}}' | jq -r 'to_entries | map(.key + "=" + .value) | .[]' | grep -E "^(TF_)?(${{ steps.extract_environment.outputs.environment }}_)?CMSENV_" | sed -r 's/^(TF_)?(${{ steps.extract_environment.outputs.environment }}_)?CMSENV_//' > cms/.env

      - name: Build and Push Container
        env:
          REPOSITORY: ${{ secrets[format('TF_{0}_CMS_REPOSITORY', steps.extract_environment.outputs.environment)] }} 
          SERVICE: ${{ secrets[format('TF_{0}_CMS_SERVICE', steps.extract_environment.outputs.environment)] }}
        run: |-
          docker build -f cms/Dockerfile.prod -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./cms
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          # tag as "latest"
          docker tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"

      - name: Deploy to Cloud Run
        env:
          REPOSITORY: ${{ secrets[format('TF_{0}_CMS_REPOSITORY', steps.extract_environment.outputs.environment)] }} 
          SERVICE: ${{ secrets[format('TF_{0}_CMS_SERVICE', steps.extract_environment.outputs.environment)] }}
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
